# -*- coding: utf-8 -*-
"""Coding Assignment-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rriGvTRj3cQ1hCmln3zUuSypwrA5W1AA

# **Add One To Number**
"""

def plusOne(digits):
    n = len(digits)
    carry = 1
    for i in range(n - 1, -1, -1):
        digits[i] += carry
        carry = digits[i] // 10
        digits[i] %= 10

    if carry:
        digits.insert(0, carry)

    return digits

k=int(input("enter the length of array "))
p=[]
for i in range(k):
  a=int(input("enter number "))
  p.append(a)
output_result = plusOne(p)
print(output_result)

"""# **Intersection of Linked Lists**"""

class ListNode:
    def __init__(self, value=0, next=None):
        self.value = value
        self.next = next

def getIntersectionNode(headA, headB):
    if not headA or not headB:
        return None

    pointerA, pointerB = headA, headB

    while pointerA != pointerB:
        pointerA = headB if pointerA is None else pointerA.next
        pointerB = headA if pointerB is None else pointerB.next

    return pointerA

a1 = ListNode(1)
a2 = ListNode(2)

b1 = ListNode(3)
b2 = ListNode(4)
b3 = ListNode(5)

c1 = ListNode(6)
c2 = ListNode(7)
c3 = ListNode(8)

a1.next = a2
a2.next = c1

b1.next = b2
b2.next = b3
b3.next = c1

c1.next = c2
c2.next = c3

result = getIntersectionNode(a1, b1)

if result:
    print(f"Intersection Node Value: {result.value}")
else:
    print("No Intersection")

"""# **Palindrome Integer**"""

k=int(input("give number "))
a=str(k)
if a==a[::-1]:
  print('1')
else:
  print('0')

"""# **Majority Element**"""

def majorityElement(nums):
    candidate = None
    count = 0

    for num in nums:
        if count == 0:
            candidate = num
        count += 1 if num == candidate else -1

    count = 0
    for num in nums:
        if num == candidate:
            count += 1

    return candidate if count > len(nums) // 2 else None

k=int(input("Enter the length of array "))
p=[]
for i in range(k):
  a=int(input("Enter number "))
  p.append(a)

output_result = majorityElement(p)
print(output_result)

"""# **Pascal Triangle**"""

def generate(numRows):
    if numRows == 0:
        return []

    result = [[1]]

    for i in range(1, numRows):
        row = [1]
        for j in range(1, i):
            row.append(result[i - 1][j - 1] + result[i - 1][j])
        row.append(1)
        result.append(row)

    return result

k=int(input("enter number of rows "))
result = generate(k)
for row in result:
    print(row)

